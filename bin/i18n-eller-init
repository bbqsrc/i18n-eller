#!/usr/bin/env node

"use strict"

const program = require("commander")
const fs = require("fs")
const xcode = require("xcode")
const path = require("path")
const pkg = require("../package.json")

const stringFile = (lang) => `${lang}.lproj/Localizable.strings`
const getFirstProjectSection = (proj) => proj.pbxProjectSection()[proj.getFirstProject().uuid]
const getMainGroup = (proj) => {
  const mainGroupUuid = getFirstProjectSection(proj).mainGroup
  return proj.getPBXGroupByKey(mainGroupUuid)
}
const createStringsVariantGroup = (proj, subgroupId) => {
  const tmpGroupKey = proj.pbxCreateVariantGroup("Localizable.strings")
  proj.addToPbxGroup(tmpGroupKey, subgroupId)

  const vgroup = {
    uuid: proj.generateUuid(),
    fileRef: tmpGroupKey,
    basename: "Localizable.strings"
  }

  proj.addToPbxBuildFileSection(vgroup)
  proj.addToPbxResourcesBuildPhase(vgroup)
}

const pbxVariantGroupKeyByName = function(proj, name) {
  var groups = proj.hash.project.objects['PBXVariantGroup'],
      key, groupKey;

  for (key in groups) {
      if (!/_comment$/.test(key)) continue;

      if (groups[key] == name) {
          groupKey = key.split(/_comment$/)[0];
          return groupKey;
      }
  }

  return null;
}

function run(projPath, langs) {
  const fullPath = `${projPath}/project.pbxproj`
  const proj = xcode.project(fullPath)
  proj.parseSync()

  if (pbxVariantGroupKeyByName(proj, "Localizable.strings") != null) {
    console.log("Localizable.strings found; aborting.")
    process.exit(1)
  }

  const mainGroup = getMainGroup(proj)
  const firstSubgroupUuid = mainGroup.children[0].value
  const subgroupPath = JSON.parse(proj.getPBXGroupByKey(firstSubgroupUuid).path)
  const srcPath = path.resolve(projPath, "..", subgroupPath)

  // Create the strings variant group
  createStringsVariantGroup(proj, firstSubgroupUuid)

  // Get the group key because node-xcode is buggy as hell
  const groupKey = pbxVariantGroupKeyByName(proj, "Localizable.strings")
  
  // Add known regions
  for (const lang of langs) {
    proj.addKnownRegion(lang)

    // Create empty strings file
    const fn = stringFile(lang)
    try {
      fs.mkdirSync(path.join(srcPath, `${lang}.lproj`))
    } catch (_) {}
    fs.writeFileSync(path.join(srcPath, fn), "")

    console.log("Adding file " + fn)
    const file = proj.addFile(fn, groupKey)
  }

  console.log("Writing project...")
  fs.writeFileSync(fullPath, proj.writeSync())
}

program
  .version(pkg.version)
  .command("xcode <project> [langs...]", "Initialises language files for Xcode projects")
  .action(function(cmd, project, ...langs) {
    langs.pop()
    run(project, langs)
    process.exit(0)
  })

program.parse(process.argv)

/*
if (process.argv.length < 3) {
  program.help()
}
*/
